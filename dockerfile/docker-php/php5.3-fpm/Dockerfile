FROM alpine:3.4
LABEL maintainer="surenkids@gmail.com"

# persistent / runtime deps
ENV PHPIZE_DEPS \
		autoconf \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkgconf \
		re2c
RUN apk add --no-cache --virtual .persistent-deps \
		ca-certificates \
		curl \
		tar \
		xz

# ensure www-data user exists
RUN set -x \
	&& addgroup -g 82 -S www-data \
	&& adduser -u 82 -D -S -G www-data www-data
# 82 is the standard uid/gid for "www-data" in Alpine
# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV PHP_VERSION 5.3.29
ENV PHP_URL="https://secure.php.net/get/php-${PHP_VERSION}.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-${PHP_VERSION}.tar.xz.asc/from/this/mirror"

RUN set -xe; \
	\
	apk add --no-cache --virtual .fetch-deps \
		gnupg \
		openssl \
	; \
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	wget -O php.tar.xz "$PHP_URL"; \
	\
	apk del .fetch-deps

COPY docker-php-source /usr/local/bin/

RUN chmod +x /usr/local/bin/docker-php-source

RUN set -xe \
	&& apk add --no-cache --virtual .build-deps \
		$PHPIZE_DEPS \
		curl-dev \
		libedit-dev \
		libxml2-dev \
		openssl-dev \
		sqlite-dev \
	\
	&& export CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	&& docker-php-source extract \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
		--disable-cgi \
		\
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
		\
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
		\
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(getconf _NPROCESSORS_ONLN)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& docker-php-source delete \
	\
	&& runDeps="$( \
		scanelf --needed --nobanner --recursive /usr/local \
			| awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
			| sort -u \
			| xargs -r apk info --installed \
			| sort -u \
	)" \
	&& apk add --no-cache --virtual .php-rundeps $runDeps \
	\
	&& apk del .build-deps

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

RUN chmod +x /usr/local/bin/docker-php-ext-* \
  && chmod +x /usr/local/bin/docker-php-entrypoint

# download phpredis to php ext folder
RUN cd /tmp \
      && mkdir -p /usr/src/php/ext/phpredis \
      && curl -sL "https://github.com/phpredis/phpredis/archive/4.3.0.tar.gz" -o phpredis.tar.gz \
      && tar -xof phpredis.tar.gz -C /usr/src/php/ext/phpredis --strip-components=1 \
      && rm -rf /tmp/*

# download yaf to php ext folder
RUN cd /tmp \
      && mkdir -p /usr/src/php/ext/yaf \
      && curl -sL "https://github.com/laruence/yaf/archive/yaf-2.3.5.tar.gz" -o yaf.tar.gz \
      && tar -xof yaf.tar.gz -C /usr/src/php/ext/yaf --strip-components=1 \
      && rm -rf /tmp/*

# Change timezone to Asia/Shanghai
RUN apk add --no-cache tzdata && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
	&& echo "Asia/Shanghai" > /etc/timezone \
	&& apk del tzdata

# Add bash to alpine
RUN apk add --no-cache bash

# add php extenstions
RUN apk add -U --no-cache \
  autoconf \
  libmemcached-dev \
  libxml2-dev \
  alpine-sdk \
  mariadb-dev \
  zlib-dev \
  libxslt-dev \
  openldap-dev \
  libjpeg-turbo-dev \
  libmcrypt-dev \
  freetype-dev \
  libpng-dev \
  && pecl install apc \
  && echo extension=apc.so > /usr/local/etc/php/conf.d/apc.ini \
  && pecl install memcached-2.2.0 \
  && echo extension=memcached.so > /usr/local/etc/php/conf.d/memcached.ini \
  && pecl install memcache-2.2.7 \
  && echo extension=memcache.so > /usr/local/etc/php/conf.d/memcache.ini \
	&& pecl install mongo-1.6.16 \
	&& echo extension=mongo.so > /usr/local/etc/php/conf.d/mongo.ini \
  && docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr/include --with-freetype-dir=/usr/include \
  && docker-php-ext-install gd \
  && docker-php-ext-configure ldap --with-libdir=lib/ \
  && docker-php-ext-install ldap \
	&& docker-php-ext-install mysql bcmath soap xsl mcrypt mbstring pdo pdo_mysql zip iconv mysqli phpredis yaf \
  && apk del --purge autoconf alpine-sdk mariadb-dev openldap-dev \
  && apk add -U mariadb-client-libs libldap \
  && cd /usr/local/bin \
  && curl -sS https://getcomposer.org/installer | php \
  && mv composer.phar composer \
  && rm -rf /var/cache/apk/*

ENTRYPOINT ["docker-php-entrypoint"]
WORKDIR /var/www/html

RUN set -ex \
	&& cd /usr/local/etc \
	&& if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
		{ \
			echo '[global]'; \
			echo 'include=etc/php-fpm.d/*.conf'; \
		} | tee php-fpm.conf; \
	fi \
	&& { \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = 9000'; \
	} | tee php-fpm.d/zz-docker.conf \
  && sed -i 's/^listen =/;listen =/' /usr/local/etc/php-fpm.d/www.conf \
  && sed -i 's/^listen =/;listen =/' /usr/local/etc/php-fpm.conf.default

# set yaf to name space mode
RUN echo 'yaf.use_namespace = 1' | tee -a /usr/local/etc/php/conf.d/docker-php-ext-yaf.ini

EXPOSE 9000
CMD ["php-fpm"]